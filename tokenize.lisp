;;;; tokenize.lisp

(in-package #:thym)

(define-string-lexer thym-tokens
  ("\\(" (return (values $@ :lparen)))
  ("\\)" (return (values $@ :rparen)))
  ("\\[" (return (values #\( :lparen)))
  ("\\]" (return (values #\) :rparen)))
  ("\\{" (return (values #\( :lparen)))
  ("\\}" (return (values #\) :rparen)))
  ("[\\+\\-\\*\\/\\^]" (return (values (intern (string-upcase $@) :thym) :infix-op)))
  ("\\i" (return #C (0 1)))
  ("pi" (return 'pi))
  ("Ï€" (return 'pi))
  ("e" (return '(exp 1)))
  ("\\," (return (values #\, :comma)))
  ("[A-Za-z_][A-Za-z0-9_\\-]+" (return (values (intern (string-upcase $@) :thym) :fun)))
  ("[A-Za-z_]" (return (values (intern (string-upcase $@) :thym) :var)))
  ("[0-9]*\\.?[0-9]+" (return (values (read-from-string $@) :number)))
  ("[ \\n\\t]+" #| ignore whitespace |#))

(defun tokenize (string)
  (do* ((token-generator (thym-tokens string))
        (token (multiple-value-list (funcall token-generator))
	       (multiple-value-list (funcall token-generator)))
        (value (first token) (first token))
        (tag (second token) (second token))
        prev-tag
        expr)
       ((not value) (read-from-string (print 
                                       (with-output-to-string (s)
                                         (princ #\( s)
                                         (dolist (x (nreverse expr))
                                           (print x)
                                           (if (symbolp x)
                                               (prin1 x s)
                                               (princ x s)))
                                         (princ #\) s))))
    (when (and (member prev-tag '(:number :var :rparen))
               (member tag '(:op :var :lparen)))
      (push '* expr))
    (when (eq tag :op)
      (push '|(| expr))
    (unless (or (and (eq tag :lparen)
                     (eq prev-tag :op)))
      (push (if (eq tag :var) `',value value) expr))
    (setf prev-tag tag)

    (defun shunt (string)
      (loop with queue and stack
            with token-generator = (thym-tokens string)
            for (value tag) = (multiple-value-list (funcall token-generator))
            do (when (not tag) (loop-finish))
               (case tag
                 ((:number :var) (push value queue))
                 (:fun (push value stack))
                 (:comma
                  (loop until (eq (first stack) '|(|)
                        do (push (pop stack) queue)))
                 (:op (loop for o2 = (first stack)
                            with o1 = value
                            while (and (infix-p o2)
                                       (or (and (left-assoc o1)
                                                (<= (precedence o1)
                                                    (precedence o2)))
                                           (<= (precedence o1)
                                               (precedence o2))))
                            do (push (pop stack) queue)
                            finally (push o1 stack)))
                 (:lparen (push value stack))
                 (:rparen
                  (loop until (eq (first stack) '|(|)   
                        do (push (pop stack) queue))
                  (pop stack)
                  (if (and (not (infix-p (first stack)))
                           (fboundp (first stack)))
                      (push (pop stack) queue)
                      (when (endp stack)
                        (error "mismatched parens")))))
            finally
               (loop while (infix-p (first stack))
                     when (member (first stack) '(:lparen :rparen))
                       do (error "mismatched parens")
                     do (push (pop stack) queue))
               (return (nreverse queue)))))))
