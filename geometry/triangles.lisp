(in-package #:thym)

(defclass triangle ()
  ((%a :accessor triangle-a :initarg :a)
   (%b :accessor triangle-b :initarg :b)
   (%c :accessor triangle-c :initarg :c)
   (%alpha :accessor triangle-alpha :initarg :alpha)
   (%beta :accessor triangle-beta :initarg :beta)
   (%gamma :accessor triangle-gamma :initarg :gamma)))


(defun make-triangle (&key a b c alpha beta gamma)
  (make-instance 'triangle :a a :b b :c c
                           :alpha alpha :beta beta :gamma gamma))

(defun solve-triangle (triangle)
  (let ((a (triangle-a triangle))
        (b (triangle-b triangle))
        (c (triangle-c triangle))
        (alpha (triangle-alpha triangle))
        (beta (triangle-beta triangle))
        (gamma (triangle-gamma triangle)))
    (flet ((solve-sss ()
             (let ((alpha (acos (/ (+ (* b b) (* c c) (- (* a a)))
                                   (* 2 b c))))
                   (beta (acos (/ (+ (* a a) (* c c) (- (* b b)))
                                  (* 2 a c)))))
               (values alpha beta (- cl:pi alpha beta))))
           (solve-sas (a b gamma)
             (let* ((c (sqrt (+ (* a a)
                                (* b b)
                                (- (* 2 a b (cos gamma))))))
                    (alpha (acos (/ (+ (* b b) (* c c) (- (* a a)))
                                    (* 2 b c)))))
               (values c alpha beta)))
           (solve-ssa (b c beta)
             (let ((discrimenant (cl:* c b (cl:sin beta))))
               (cond ((> d 1)
                      (values))
                     ((= d 1)
                      (values gamma )))))
           (solve-asa (c alpha beta)
             (let ((gamma (- pi alpha beta)))
               (values (* c (/ (sin alpha) (sin gamma)))
                       (* c (/ (sin beta) (sin gamma)))
                       gamma))))
      (macrolet ((triangle! ()
                   `(make-triangle :a a :b b :c c
                                   :alpha alpha
                                   :beta beta
                                   :gamma gamma)))
        (cond
          ((and a b c)
           (multiple-value-bind (alpha beta gamma) (solve-sss)
             (triangle!)))
          ((and a b gamma)
           (multiple-value-bind (c alpha beta) (solve-sas a b gamma)
             (triangle!)))
          ((and b c alpha)
           (multiple-value-bind (a beta gamma) (solve-sas b c alpha)
             (triangle!)))
          ((and c a beta)
           (multiple-value-bind (b gamma alpha) (solve-sas c a beta)
             (triangle!)))
         #+nil
          ((and a b alpha)
           (values (multiple-value-bind (c beta gamma)
                       (solve-sss a b alpha))))
          ((and c alpha beta)
           (multiple-value-bind (a b gamma) (solve-asa c alpha beta)
             (triangle!)))
          ((and a beta gamma)
           (multiple-value-bind (b c alpha) (solve-asa a beta gamma)
             (triangle!)))
          ((and b beta gamma)
           (multiple-value-bind (c a beta) (solve-asa b beta gamma)
             (triangle!)))
          (t (values)))))))
